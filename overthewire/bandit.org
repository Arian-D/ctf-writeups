#+title: Bandit
#+author: Arian
#+hugo_base_dir: ../
# #+hugo_section: ./
#+startup: fold

I obviously did not put the passwords in, but you should be able to
run the commands as the solution. There also might be multiple
solutions provided to solve the same problem; pick your poison.

* Level 0
This is a simple ssh login.
#+begin_src shell
ssh bandit0@bandit.labs.overthewire.org -p 2220
#+end_src

* Level 1
Use the ~cat~ command to view the content.
#+begin_src shell
cat readme
#+end_src

* Level 2
A simple ~./~ prefix explicitly reads the file from the current
directory instead of the stdin
#+begin_src shell
cat ./-
#+end_src

* Level 3
If you just type ~cat s~ and press TAB you would see the following
#+begin_src shell
cat spaces\ in\ this\ filename
#+end_src

Another simple solution is using single or double quotes
#+begin_src shell
cat "spaces in this filename"
#+end_src

* Level 4
If you type ~cat i~ and TAB a few times you'll see ~inhere/.hidden~ show
up. 

Another way of figuring this out is just using the ~-a~ flag:
#+begin_src shell
ls -a inhere
#+end_src
which shows you the path of the file.

#+begin_src shell
cat inhere/.hidden
#+end_src

* Level 5
One easy way is using ~strings~:
#+begin_src shell
strings inhere/*
#+end_src

You can see the outlier, which is the password. A better way of doing
is is a simple

#+begin_src shell
file inhere/*
#+end_src

Which shows that only one of the files is an ~ASCII text~, which then
you can read with ~cat~:
#+begin_src shell
cat inhere/-file07
#+end_src

* Level 6
For this one you might want to check out the man page (~man find~). If
you don't know, you can search through man-pages using ~/~. For several
of the flags like ~-readable~ or ~-type~ this would be very necessary to know.

The quickest way to know which file it is you can simply rely on the
~-size~ flag.
#+begin_src shell
file -size 1033c
#+end_src

That's it! You can see the content using a quick bash trick
#+begin_src shell
cat $(find -size 1033c)
#+end_src

Although that's enough to get the solution, you can find all
non-executable human-readable files using ~!~ for negation, ~xargs~ for
running ~du~ (disk usage) on all files, and filtering the readable files
#+begin_src shell
find ! -executable | xargs -I ? file ? | grep "ASCII text$"
#+end_src

* Level 7
In this one size alone is not enough, so we'll factor in the user and
group owner:
#+begin_src shell
find / -size 33c -user bandit7 -group bandit6
#+end_src

You'll see a lot of ~Permission denied~ because as a user you can't see
all kind of files. In order to get rid of that you can hide standard
error by redirecting like ~2> /dev/null~.

To put it all together,
#+begin_src shell
cat $(find / -size 33c -user bandit7 -group bandit6 2> /dev/null)
#+end_src

* Level 8
the file ~data.txt~ is about 98566 lines; you can find that out using
~wc -l data.txt~. This is hard to filter out with the eyes, so we'll
rely on ~grep~:
#+begin_src shell
grep millionth data.txt
#+end_src
That'll show you the password, which you can then copy and paste. If
you want to insist on /only/ seeing the password and cutting out the
second part:
#+begin_src shell
grep millionth data.txt | cut -f2
#+end_src

* Level 9
First, to get the count of every line, we'll do this:
#+begin_src shell
sort data.txt | uniq -c
#+end_src
There's still too many lines that appeared 10 times, so we'll have to
~sort~ again, so we'll do it again and only get the last line:
#+begin_src shell
sort data.txt | uniq -c | sort | tail -1 | awk '{print $2}'
#+end_src

* Level 10
First we gotta make it readable using ~strings~
#+begin_src shell
strings data.txt
#+end_src

Then, we'll get the lines that *start with one or more =*:
#+begin_src shell
strings data.txt | egrep '^\=+'
#+end_src

the one we need has more than 4 characters (the one besides "the"):
#+begin_src shell
strings data.txt | egrep '^\=+ ....' | awk '{print $2}'
#+end_src

Check out https://regex101.com/ to learn more about regular
expressions. ~awk~, however, is its own language.

* Level 11
It's easy to decode base64; one way is to use it is with a pipe
#+begin_src shell
cat data.txt | base64 -d
#+end_src

You can read from standard input with =<=
#+begin_src shell
base64 -d < data.txt
#+end_src

Or just pass it to ~base64~ as an argument and read the 4th component
(the password)
#+begin_src shell
base64 -d data.txt | awk '{print $4}'
#+end_src

* Level 12
This is a fun one. You can [[https://duckduckgo.com/?q=rot13+decoder&ia=answer][look up]] websites that do it like [[https://cyberchef.org/][cyberchef]],
but if you don't want to exit your terminal, you can simply decode it
with python. You can launch Python by just typing ~python3~ and you can
use the built-in ~codecs~ library
#+begin_src python
  from codecs import decode
  print(decode(open('data.txt').read(), 'rot_13'))
#+end_src

* Level 13
As the page suggests, try using =xxd= with the =-r= flag to reverse the
hexdump.
#+begin_src shell
xxd -r data.txt > /tmp/somefile
#+end_src
Calling =file /tmp/somefile= will inform us that the file is
gzip-compressed

You might think a simple =gzip -d /tmp/somefile= might work, but sadly
=gzip= will complain that we don't have the right file extension. To get
around this, we'll do use some redirection magic to _read_ from the
stdin for decompressing, and _write_ to another file
#+begin_src shell
gzip -d < /tmp/somefile > /tmp/f1
#+end_src

Next one is bzip2, gzip again, tar, and so on. One thing the website
does *not* mention is that you don't have to create new files in
=/tmp=. One of the strengths of posix shell is the ability to rely on
pipes and stdin and stdout.

In the spirit of keeping these solutions to one-line, we can just pipe
(compose, chain, or however else you want to think about it).

Starting with
#+begin_src shell
xxd -r data.txt | file -
#+end_src
We'll learn the file type, so we can move on to
#+begin_src shell
xxd -r data.txt | gzip -d | file -
#+end_src

If we continue like so, there's no need to create temporary files, and
it'll be very neat. The deeply nested compressed file could easily be
decompressed using
#+begin_src shell
xxd -r data.txt | gzip -d | bzip2 -d | gzip -d | tar -xO | tar -xO | bzip2 -d | tar -xO | gzip -d
#+end_src

* Level 14
This level wants to introduce you to ssh keys. Just a =-i= is enough to
get to the next level
#+begin_src shell
ssh -i sshkey.private bandit14@localhost -p 2220
#+end_src

* Level 15
This level introduces you to netcat. Take a loot at =man nc= and =nc -h=
to get a feel, but the gist of =nc= is simple:
#+begin_src shell
nc localhost 30000
#+end_src
Although you can interactively send the password like this, you can
take advantage of stdin, and send it to nc:
#+begin_src shell
nc localhost 30000 < /etc/bandit_pass/bandit14
#+end_src

* Level 16
This is very similar, but with TLS. OverTheWire doesn't make it clear,
but to save you some time, check out =man openssl-s_client=. The
subcommand man-page is the one they're referring to, and just like the
=nc= command, you can redirect the file to stdin.

#+begin_src shell
openssl s_client -ign_eof localhost:30001 < /etc/bandit_pass/bandit15
#+end_src

* Level 17
The main =nmap= flags you would need for discovery here are =-p= for the
port range, and =-sV= for services. First lets see what's open
#+begin_src shell
nmap -p 31000-32000 localhost
#+end_src
Since the number of ports is a lot, using =-sV= on the range would take
too long, we can do a quick =openssl s_client localhost:...= on each of
them.

After a quick trial and error, you would notice that one responds back
with ~Wrong! Please enter the correct current password~. Sending the
correct current password reveals an ssh private key, which you can
save as some file for connecting to the next level:
#+begin_src shell
ssh -i the-private-key-file bandit17@bandit.labs.overthewire.org -p 2220
#+end_src

* Level 18
The 4th suggested command on the list is the answer! =diff= shows you
the difference of two files, which would be the answer for the next
level.
#+begin_src shell
diff passwords.old passwords.new 
#+end_src

As mentioned, the "Byebye !" doesn't mean it's the wrong answer.

* Level 19
Since we get "Byebye !", that means we can't interact with the
shell. Appending commands could let us execute them. For instance,
#+begin_src shell
ssh bandit18@bandit.labs.overthewire.org -p 2220 bash
#+end_src
Would give you a shell. A quick look around shows there's a file named
~readme~, which you can look at with ~cat~:

#+begin_src shell
ssh bandit18@bandit.labs.overthewire.org -p 2220 cat readme
#+end_src

* Level 20
This level teaches you about setuid. The =bandit20-do= executes
everything as =bandit20=. You can get the file content by simply
invoking the binary followed by =cat= and the file name:
#+begin_src shell
  ./bandit20-do cat /etc/bandit_pass/bandit20
#+end_src
